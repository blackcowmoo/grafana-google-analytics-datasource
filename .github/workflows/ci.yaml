name: CI

on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable --prefer-offline

      - name: Check types
        run: yarn run typecheck
      # - name: Lint
      #   run: yarn run lint
      # - name: Unit tests
      #   run: yarn run test:ci
      - name: Build frontend
        run: yarn run build

      - name: Check for backend
        id: check-for-backend
        run: |
          if [ -f "Magefile.go" ]
          then
            echo "has-backend=true" >> $GITHUB_OUTPUT
          fi

      - name: Setup Go environment
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: actions/setup-go@v3
        with:
          go-version: '1.21'

      - name: Test backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@v2
        with:
          version: latest
          args: coverage

      - name: Build backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@v2
        with:
          version: latest
          args: buildAll

      - name: Get plugin metadata
        id: metadata
        run: |
          sudo apt-get install jq

          export GRAFANA_PLUGIN_ID=$(cat dist/plugin.json | jq -r .id)
          export GRAFANA_PLUGIN_VERSION=$(cat dist/plugin.json | jq -r .info.version)
          export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip

          echo "plugin-id=${GRAFANA_PLUGIN_ID}" >> $GITHUB_OUTPUT
          echo "plugin-version=${GRAFANA_PLUGIN_VERSION}" >> $GITHUB_OUTPUT
          echo "archive=${GRAFANA_PLUGIN_ARTIFACT}" >> $GITHUB_OUTPUT

      - name: Package plugin
        id: package-plugin
        run: |
          mv dist ${PLUGIN_ID}
          zip ${ARCHIVE} ${PLUGIN_ID} -r
        env:
          ARCHIVE: $\{{ steps.metadata.outputs.archive }}
          PLUGIN_ID: $\{{ steps.metadata.outputs.plugin-id }}

      - name: Check plugin.json
        run: |
          docker run --pull=always \
            -v $PWD/${ARCHIVE}:/archive.zip \
            grafana/plugin-validator-cli -analyzer=metadatavalid /archive.zip
        env:
          ARCHIVE: $\{{ steps.metadata.outputs.archive }}
      
      - name: Restore Google Analytics Json
        id: restore-google-json
        run: |
          mkdir -p ./test/credencials
          echo '${{ secrets.GOOGLE_AUTH_JSON }}' | base64 --decode > ./test/credencials/auth.json

      - name: Check for E2E
        id: check-for-e2e
        run: |
          if [ -d "cypress" ]
          then
            echo "has-e2e=true" >> $GITHUB_OUTPUT
          fi

      - name: Start grafana docker
        if: steps.check-for-e2e.outputs.has-e2e == 'true'
        run: docker-compose up -d

      - name: Run e2e tests
        continue-on-error: true
        id: run-e2e-tests
        if: steps.check-for-e2e.outputs.has-e2e == 'true'
        run: yarn run e2e

      - name: Stop grafana docker
        if: steps.check-for-e2e.outputs.has-e2e == 'true'
        run: docker-compose down

      - name: Archive E2E output
        uses: actions/upload-artifact@v4
        if: steps.check-for-e2e.outputs.has-e2e == 'true' && steps.run-e2e-tests.outcome != 'success'
        with:
          name: cypress
          path: |
            cypress/videos
            cypress/report.json
            cypress/screenshots
          retention-days: 5
